import telebot
from telebot import types
import requests
import xml.etree.ElementTree as ET
import datetime
from datetime import date

bot = telebot.TeleBot("7687972992:AAGJNdajKIHbcYNGPm7fPX1aWKYrpAAILlk")  # üîÅ –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞

# –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç (–∫–æ–¥ –≤–∞–ª—é—Ç—ã: –∫–æ–¥ –¶–ë –†–§)
CURRENCIES = {
    "USD": "R01235",
    "EUR": "R01239"
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã –ø–æ chat_id
user_state = {}


def validate_date(input_date_str):
    try:
        input_date = datetime.datetime.strptime(input_date_str, "%d.%m.%Y").date()
        if input_date > date.today():
            return None
        return input_date
    except ValueError:
        return None


def get_currency_rate(currency_id, date_req):
    try:
        url = f"https://www.cbr.ru/scripts/XML_daily.asp?date_req={date_req.strftime('%d/%m/%Y')}"
        response = requests.get(url, timeout=10)
        response.raise_for_status()

        root = ET.fromstring(response.text)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∫—É—Ä—Å–∞
        actual_date = root.attrib.get("Date", date_req.strftime("%d.%m.%Y"))

        # –ò—â–µ–º –Ω—É–∂–Ω—É—é –≤–∞–ª—é—Ç—É
        for valute in root.findall("Valute"):
            if valute.attrib["ID"] == currency_id:
                nominal = valute.find("Nominal").text
                name = valute.find("Name").text
                value = valute.find("Value").text.replace(",", ".")
                return {
                    "date": actual_date,
                    "nominal": nominal,
                    "name": name,
                    "value": value
                }
        return None
    except (requests.RequestException, ET.ParseError) as e:
        print(f"Error fetching currency rate: {e}")
        return None


@bot.message_handler(commands=['start', 'help'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(*CURRENCIES.keys())
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text in CURRENCIES)
def choose_currency(message):
    user_state[message.chat.id] = {"currency": message.text}
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")


@bot.message_handler(func=lambda message: True)
def handle_date(message):
    chat_id = message.chat.id
    if chat_id not in user_state or "currency" not in user_state[chat_id]:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –Ω–∞–∂–∞–≤ /start.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
    input_date = validate_date(message.text)
    if not input_date:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É).")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–µ
    currency_name = user_state[chat_id]["currency"]
    currency_data = get_currency_rate(CURRENCIES[currency_name], input_date)

    if not currency_data:
        bot.send_message(chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å {currency_name} –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = (f"–ö—É—Ä—Å –¶–ë –†–§ –Ω–∞ {currency_data['date']}:\n"
                f"{currency_data['nominal']} {currency_data['name']} = {currency_data['value']} —Ä—É–±.")

    bot.send_message(chat_id, response)


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling()